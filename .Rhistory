mutate(string = format(string, big.mark = ",") %>%
trimws())
# Model
df_mod <- df_coef %>%
select(unem_clean:ghq_inc) %>%
mutate(sex = str_to_title(sex)) %>%
mutate(across(matches("_inc$"),
~ ifelse(.x == TRUE, "Included", "Excluded"))) %>%
pivot_longer(everything(), names_to = "cat", values_to = "string")
# Coefficients
df_coef %>%
select(coefs) %>%
unnest(coefs) %>%
rename(cat = term) %>%
mutate(across(c(beta, lci, uci), round, 2),
string = ifelse(str_detect(cat, "^sd_"),
glue("{beta}"),
glue("{beta}\n({lci}, {uci})"))) %>%
select(cat, string) %>%
bind_rows(df_mod, df_n) %>%
left_join(pretty_lbls, by = "cat") %>%
bind_cols(select(df_coef, mod, unem_clean,
sex, father_inc, ghq_inc))
}
mod
mod %>%
rowwise() %>%
group_split()
mod %>%
rowwise() %>%
group_split() %>%
map_dfr(clean_coefs)
clean_coefs <- function(df_coef){
# Observations
df_n <- df_coef %>%
unnest(fit) %>%
unnest(groups) %>%
select(cat = name, string = value) %>%
bind_rows(tibble(cat = "nobs",
string = df_coef %>%
unnest(fit) %>%
pull(nobs))) %>%
mutate(string = format(string, big.mark = ",") %>%
trimws())
# Model
df_mod <- df_coef %>%
select(unem_clean, sex, ghq_inc, father_inc) %>%
mutate(sex = str_to_title(sex)) %>%
mutate(across(matches("_inc$"),
~ ifelse(.x == TRUE, "Included", "Excluded"))) %>%
pivot_longer(everything(), names_to = "cat", values_to = "string")
# Coefficients
df_coef %>%
select(coefs) %>%
unnest(coefs) %>%
rename(cat = term) %>%
mutate(across(c(beta, lci, uci), round, 2),
string = ifelse(str_detect(cat, "^sd_"),
glue("{beta}"),
glue("{beta}\n({lci}, {uci})"))) %>%
select(cat, string) %>%
bind_rows(df_mod, df_n) %>%
left_join(pretty_lbls, by = "cat") %>%
bind_cols(select(df_coef, mod, unem_clean,
sex, father_inc, ghq_inc))
}
mod %>%
rowwise() %>%
group_split() %>%
map_dfr(clean_coefs)
# 5. Regression Tables ----
clean_coefs <- function(df_coef){
# Observations
df_n <- df_coef %>%
unnest(fit) %>%
unnest(groups) %>%
select(cat = name, string = value) %>%
bind_rows(tibble(cat = "nobs",
string = df_coef %>%
unnest(fit) %>%
pull(nobs))) %>%
mutate(string = format(string, big.mark = ",") %>%
trimws())
# Model
df_mod <- df_coef %>%
select(unem_clean, sex, ghq_inc, father_inc) %>%
mutate(sex = str_to_title(sex)) %>%
mutate(across(matches("_inc$"),
~ ifelse(.x == TRUE, "Included", "Excluded"))) %>%
pivot_longer(everything(), names_to = "cat", values_to = "string")
# Coefficients
df_coef %>%
select(coefs) %>%
unnest(coefs) %>%
rename(cat = term) %>%
mutate(across(c(beta, lci, uci), round, 2),
string = ifelse(str_detect(cat, "^sd_"),
glue("{beta}"),
glue("{beta}\n({lci}, {uci})"))) %>%
select(cat, string) %>%
bind_rows(df_mod, df_n) %>%
left_join(pretty_lbls, by = "cat") %>%
bind_cols(select(df_coef, mod, unem_clean,
sex, father_inc, ghq_inc))
}
mod %>%
rowwise() %>%
group_split() %>%
map_dfr(clean_coefs)
rm(list = ls(0))
rm(list = ls())
library(tidyverse)
library(haven)
setwd("D:/Miscellaneous/Courses/IEHC0046")
remove_na <- function(var){
lbls <- attr(var, "labels")
lbls <- lbls[lbls >= 0]
if (length(lbls)==0){
attr(var, "labels") <- NULL
class(var) <- typeof(var)
} else attr(var, "labels") <- lbls
var
}
elsa <- read_dta("teaching_1009new.dta") %>%
mutate(age = zap_labels(age)) %>%
map_dfc(remove_na) %>%
as_factor() %>%
zap_formats() %>%
mutate(gor = factor(gor),
sex = fct_recode(sex, male = "Men", female = "Women"))
attr(elsa$gor, "label") <- "Government Office Region"
attr(elsa$sex, "label") <- "Sex"
save(elsa, file = "elsa.Rdata")
setwd("E:/Miscellaneous/Courses/IEHC0046")
remove_na <- function(var){
lbls <- attr(var, "labels")
lbls <- lbls[lbls >= 0]
if (length(lbls)==0){
attr(var, "labels") <- NULL
class(var) <- typeof(var)
} else attr(var, "labels") <- lbls
var
}
elsa <- read_dta("teaching_1009new.dta") %>%
mutate(age = zap_labels(age)) %>%
map_dfc(remove_na) %>%
as_factor() %>%
zap_formats() %>%
mutate(gor = factor(gor),
sex = fct_recode(sex, male = "Men", female = "Women"))
attr(elsa$gor, "label") <- "Government Office Region"
attr(elsa$sex, "label") <- "Sex"
save(elsa, file = "elsa.Rdata")
elsa
install.packages("labelled")
library(labelled)
look_for(elsa)
elsa$headlmo
x <- read_dta("teaching_1009new.dta")
str(x$headlmo)
remove_na(x$headlmo) %>% str(0)
remove_na(x$headlmo) %>% str()
remove_na(x$headlmo) %>% as_factor() %>% str()
remove_na <- function(var){
lbls <- attr(var, "labels")
lbls <- lbls[lbls >= 0]
if (length(lbls)==0){
attr(var, "labels") <- NULL
class(var) <- typeof(var)
} else attr(var, "labels") <- lbls
if (is.numeric(var)) ifelse(var < 0, NA, var)
var
}
elsa <- read_dta("teaching_1009new.dta") %>%
mutate(age = zap_labels(age)) %>%
map_dfc(remove_na) %>%
as_factor() %>%
zap_formats() %>%
mutate(gor = factor(gor),
sex = fct_recode(sex, male = "Men", female = "Women"))
attr(elsa$gor, "label") <- "Government Office Region"
attr(elsa$sex, "label") <- "Sex"
remove_na(x$headlmo) %>% as_factor() %>% str()
remove_na(x$headlmo) %>% attributes()
remove_na <- function(var){
lbls <- attr(var, "labels")
lbls <- lbls[lbls >= 0]
if (length(lbls)==0){
attr(var, "labels") <- NULL
class(var) <- typeof(var)
} else attr(var, "labels") <- lbls
if (is.numeric(var)) var <- ifelse(var < 0, NA, var)
var
}
elsa <- read_dta("teaching_1009new.dta") %>%
mutate(age = zap_labels(age)) %>%
map_dfc(remove_na) %>%
as_factor() %>%
zap_formats() %>%
mutate(gor = factor(gor),
sex = fct_recode(sex, male = "Men", female = "Women"))
is.numeric(x$sex)
class(x$sex)
x$sex
remove_na(x$sex) %>% str(0)
remove_na(x$sex) %>% str()
elsa <- read_dta("teaching_1009new.dta") %>%
mutate(age = zap_labels(age)) %>%
map_dfc(remove_na) %>%
as_factor() %>%
zap_formats() %>%
mutate(gor = factor(gor),
sex = fct_recode(sex, male = "Men", female = "Women"))
elsa <- read_dta("teaching_1009new.dta") %>%
mutate(age = zap_labels(age)) %>%
map_dfc(remove_na) %>%
as_factor() %>%
zap_formats()
elsa$sex
remove_na <- function(var){
lbls <- attr(var, "labels")
lbls <- lbls[lbls >= 0]
if (length(lbls)==0){
attr(var, "labels") <- NULL
class(var) <- typeof(var)
} else attr(var, "labels") <- lbls
var
}
x$sex
y <- x$sex
attributes(y)
remove_na <- function(var){
lbls <- attr(var, "labels")
lbls <- lbls[lbls >= 0]
if (length(lbls)==0){
attr(var, "labels") <- NULL
class(var) <- typeof(var)
} else attr(var, "labels") <- lbls
if (is.numeric(var)){
atrb <- attributes(var)
var <- ifelse(var < 0, NA, var)
attributes(var) <- atrb
}
var
}
)
remove_na <- function(var){
lbls <- attr(var, "labels")
lbls <- lbls[lbls >= 0]
if (length(lbls)==0){
attr(var, "labels") <- NULL
class(var) <- typeof(var)
} else attr(var, "labels") <- lbls
if (is.numeric(var)){
atrb <- attributes(var)
var <- ifelse(var < 0, NA, var)
attributes(var) <- atrb
}
var
}
elsa <- read_dta("teaching_1009new.dta") %>%
mutate(age = zap_labels(age)) %>%
map_dfc(remove_na) %>%
as_factor() %>%
zap_formats() %>%
mutate(gor = factor(gor),
sex = fct_recode(sex, male = "Men", female = "Women"))
attr(elsa$gor, "label") <- "Government Office Region"
attr(elsa$sex, "label") <- "Sex"
look_for(elsa)
save(elsa, file = "elsa.Rdata")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
load("elsa.Rdata")
rm(list = ls(0))
rm(list = ls())
install.packages("summarytools")
install.packages("DescTools")
load("elsa.Rdata")
DescTools::MeanCI(elsa$bmi)
DescTools::MeanCI(elsa$bmi, na.rm = TRUE)
summarytools::descr(elsa$bmi)
t.test(elsa$bmi)
CI(elsa$bmi, ci=0.95)
qt(0.025)
qt(0.025, 1010)
t.test(elsa$bmi)
summary(elsa$bmi)
t.test(elsa$bmi)
library(summarytools)
descr(elsa$bmi)
descr(elsa$dbp)
t.test(elsa$dbp)
t.test(elsa$dbp)
?t.test
str(elsa$sex)
summary(elsa$sex)
t.test(elsa$bmi[elsa$sex == "male"])
t.test(elsa$bmi[elsa$sex == "male"])
t.test(elsa$bmi[elsa$sex == "male"])
t.test(elsa$bmi[elsa$sex == "male"])
t.test(elsa$bmi[elsa$sex == "female"])
t.test(bmi ~ sex, data = elsa)
by(elsa$bmi, elsa$sex, t.test)
by(elsa$bmi, elsa$sex, t.test)
str(elsa$physact)
str(elsa$physact)
levels(elsa$physact)
by(elsa$bmi, elsa$physact, t.test)
t.test(elsa$bmi[elsa$age >= 60], mu = 28.5)
t.test(elsa$bmi[elsa$age >= 60], mu = 27.5)
m_60plus <- mean(elsa$bmi[elsa$age > 60], na.rm = TRUE)
m_60plus
t.test(elsa$bmi[elsa$age >= 60 &
elsa$physact == levels(elsa$physact)[1]])
t.test(elsa$bmi[elsa$age >= 60 &
elsa$physact == levels(elsa$physact)[1]],
mu = m_60plus)
library(tidyverse)
elsa %>%
filter(age >= 60, # Keeps the correct observations
physact == levels(physact)[1]) %>%
pull(bmi) %>% # Extracts the bmi variable
t.test(mu = m_60plus)
rm(list = ls(0))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,
warnings = FALSE, messages = FALSE)
load("elsa.Rdata")
install.packages("summarytools")
library(summarytools)
library(summarytools)
descr(elsa$bmi)
t.test(elsa$bmi)
descr(elsa$dbp)
t.test(elsa$dbp)
str(elsa$sex)
t.test(elsa$bmi[elsa$sex == "male"])
t.test(elsa$bmi[elsa$sex == "female"])
str(elsa$sex)
levels(elsa$sex)
t.test(elsa$bmi[elsa$sex == "male"])
t.test(elsa$bmi[elsa$sex == "female"])
by(elsa$bmi, elsa$sex, t.test)
str(elsa$physact)
levels(elsa$physact)
by(elsa$bmi, elsa$physact, t.test)
t.test(elsa$bmi[elsa$age >= 60], mu = 28.5)
t.test(elsa$bmi[elsa$age >= 60], mu = 27.5)
m_60plus <- mean(elsa$bmi[elsa$age >= 60], na.rm = TRUE)
m_60plus
t.test(elsa$bmi[elsa$age >= 60 &
elsa$physact == levels(elsa$physact)[1]],
mu = m_60plus)
library(tidyverse)
elsa %>%
filter(age >= 60, # Keeps the correct observations
physact == levels(physact)[1]) %>%
pull(bmi) %>% # Extracts the bmi variable
t.test(mu = m_60plus)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,
warnings = FALSE, messages = FALSE)
library(summarytools)
library(tidyverse)
load("elsa.Rdata")
t.test(elsa$sbp)
t.test(elsa$dbp)
t.test(elsa$bmi)
t.test(elsa$chol)
elsa %>%
select(sbp, dbp, bmi, chol) %>%
map(t.test)
t.test(elsa$sbp, mu = 130)
t.test(sbp ~ sex, elsa, paired = TRUE)
elsa
t.test(bmi ~ sex, elsa, paired = TRUE)
t.test(bmi ~ sex, elsa, paired = FALSE)
t.test(bmi ~ sex, elsa)
t.test(sbp ~ sex, elsa)
t.test(sbp ~ sex, elsa)
levels(elsa$bmi4)
levels(elsa$bmi4)
elsa %>%
mutate(bmi_bin = fct_collapse(bmi4,
"Less than 25" = levels(bmi4)[1:2],
"Over 25" = levels(bmi)[3:4]))
levels(elsa$bmi4)
elsa %>%
mutate(bmi_bin = fct_collapse(bmi4,
"Less than 25" = levels(bmi4)[1:2],
"Over 25" = levels(bmi)[3:4]), .before = 1)
levels(elsa$bmi4)
elsa %>%
mutate(bmi_bin = fct_collapse(bmi4,
"Less than 25" = levels(bmi4)[1:2],
"Over 25" = levels(bmi4)[3:4]), .before = 1)
levels(elsa$bmi4)
elsa <- elsa %>%
mutate(bmi_bin = fct_collapse(bmi4,
"Less than 25" = levels(bmi4)[1:2],
"Over 25" = levels(bmi4)[3:4]))
levels(elsa$bmi4)
elsa <- elsa %>%
mutate(bmi_bin = fct_collapse(bmi4,
"Less than 25" = levels(bmi4)[1:2],
"Over 25" = levels(bmi4)[3:4]))
table(elsa$bmi_bin, elsa$bmi4)
levels(elsa$bmi4)
elsa <- elsa %>%
mutate(bmi_bin = fct_collapse(bmi4,
"Less than 25" = levels(bmi4)[1:2],
"Over 25" = levels(bmi4)[3:4]))
table(elsa$bmi_bin, elsa$bmi4, useNA = "ifany")
t.test(sbp ~ bmi_bin, elsa)
library(tidyverse)
library(haven)
library(labelled)
setwd("D:/Miscellaneous/Courses/IEHC0046")
contin2 <- read_dta("contin2.dta") %>%
as_factor() %>%
zap_formats()
str(contin2)
look_for(contin2)
setwd("D:/Miscellaneous/Courses/IEHC0046")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,
warnings = FALSE, messages = FALSE)
library(summarytools)
library(tidyverse)
load("elsa.Rdata")
load("contin2.Rdata")
contin2 <- read_dta("contin2.dta") %>%
as_factor() %>%
zap_formats()
save(contin2, file = "contin2.Rdata")
load("contin2.Rdata")
?t.test
t.test(contin2$oidpsco1, contin2$oidpsco2, paired = TRUE)
t.test(contin2$oidpsco1, contin2$oidpsco2, paired = TRUE)
mean(contin2$oidpsco2)
mean(contin2$oidpsco1)
t.test(contin2$oidpsco2, contin2$oidpsco1, paired = TRUE)
levels(contin2$tx)
levels(contin2$tx)
t.test(contin2$oidpsco2, contin2$oidpsco1, paired = TRUE, subset = contin2$tx == levels(contin2$tx)[1])
x <- contin2$oidpsco2 - contin2$oidpsco1
t.test(x)
levels(contin2$tx)
t.test(contin2$oidpsco2[contin2$tx == levels(contin2$tx)[1]],
contin2$oidpsco1[contin2$tx == levels(contin2$tx)[1]],
paired = TRUE)
t.test(contin2$oidpsco2[contin2$tx == levels(contin2$tx)[2]],
contin2$oidpsco1[contin2$tx == levels(contin2$tx)[2]],
paired = TRUE)
contin2 <- contin2 %>%
mutate(oidpsco_diff = oidpsco2 - oidpsco1)
t.test(oidpsco_diff ~ tx, contin2)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,
warnings = FALSE, messages = FALSE)
library(summarytools)
library(tidyverse)
load("elsa.Rdata")
elsa %>%
select(chol, crp, bmi, age) %>%
map(t.test)
qplot(elsa$crp)
qplot(elsa$bmi)
elsa %>%
select(chol, bmi, age) %>%
map(qplot)
qplot(elsa$chol)
qplot(elsa$chol)
qplot(elsa$bmi)
qplot(elsa$age)
?cor.test
cor.test(elsa$chol, elsa$age)
sqrt(0.172)
0.172^2
names(elsa)
elsa <- elsa %>%
mutate(age_grps = ifelse(age >= 65, "65+", "50-64"), # = 65+ if age >= 65, 50-64 otherwise
age_grps = factor(age_grps, levels = c("50-64", "65+")) # Convert to factor!
elsa <- elsa %>%
mutate(age_grps = ifelse(age >= 65, "65+", "50-64"), # = 65+ if age >= 65, 50-64 otherwise
age_grps = factor(age_grps, levels = c("50-64", "65+"))) # Convert to factor!
elsa <- elsa %>%
mutate(age_grps = ifelse(age >= 65, "65+", "50-64"), # = 65+ if age >= 65, 50-64 otherwise
age_grps = factor(age_grps, levels = c("50-64", "65+"))) # Convert to factor!
by(elsa$age, elsa$age_grps, summary) # Check worked correctly
elsa <- elsa %>%
mutate(age_grps = case_when(age >= 65 ~ "65+",
age >= 50 & age < 65 ~ "50-64",
age < 50 ~ NA_character_), # = 65+ if age >= 65, 50-64 otherwise
age_grps = factor(age_grps, levels = c("50-64", "65+"))) # Convert to factor!
by(elsa$age, elsa$age_grps, summary) # Check worked correctly
elsa <- elsa %>%
mutate(age_grps = case_when(age >= 65 ~ "65+", # 65+ if age >= 65
age >= 50 & age < 65 ~ "50-64"),
# age < 50 ~ NA_character_), # Missing if age < 50
age_grps = factor(age_grps, levels = c("50-64", "65+"))) # Convert to factor!
by(elsa$age, elsa$age_grps, summary) # Check worked correctly
var.test(bmi ~ age_grps, elsa)
t.test(bmi ~ age_grps, elsa)
t.test(bmi ~ age_grps, elsa)
t.test(bmi ~ age_grps, elsa, var.equal = TRUE)
table(elsa$physact)
str(elsa$physact)
table(elsa$physact)
prop.table(table(elsa$physact))
aov(bmi ~ physact, elsa)
aov(bmi ~ physact, elsa) %>% summary()
by(elsa$bmi, elsa$physact, mean, na.rm = TRUE)
aov_res <- aov(bmi ~ physact, elsa)
summary(aov_res)
